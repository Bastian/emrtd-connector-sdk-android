name: Update License Report

on:
  push:
    branches:
      - main
    paths:
      # Trigger only if relevant files change, to avoid unnecessary runs
      - '**/build.gradle.kts'
      - '**/gradle.properties'
      - 'gradle/wrapper/gradle-wrapper.properties'
  workflow_dispatch:

jobs:
  update-report:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Define Report File Paths
        id: paths
        run: |
          echo "generated_report_file=kinegram-emrtd-connector/build/reports/dependency-license/THIRD-PARTY-NOTICES.txt" >> $GITHUB_OUTPUT
          echo "committed_report_file=THIRD-PARTY-NOTICES.txt" >> $GITHUB_OUTPUT

      - name: Calculate hash of existing committed report (ignoring timestamp)
        id: original_committed_hash
        run: |
          REPORT_FILE="${{ steps.paths.outputs.committed_report_file }}"
          if [ -f "$REPORT_FILE" ]; then
            # Use grep -v to filter out the timestamp line, then calculate sha256sum
            HASH=$(grep -v "This report was generated at" "$REPORT_FILE" | sha256sum | awk '{print $1}')
            echo "hash=$HASH" >> $GITHUB_OUTPUT
            echo "Existing committed file found. Hash: $HASH"
          else
            # Handle case where file doesn't exist yet in the root (first run or deleted)
            echo "hash=nonexistent_committed" >> $GITHUB_OUTPUT
            echo "Existing committed file not found at root."
          fi

      - name: Generate License Report
        run: ./gradlew :kinegram-emrtd-connector:generateLicenseReport

      - name: Calculate hash of newly generated report (ignoring timestamp)
        id: new_generated_hash
        run: |
          REPORT_FILE="${{ steps.paths.outputs.generated_report_file }}"
          if [ -f "$REPORT_FILE" ]; then
            HASH=$(grep -v "This report was generated at" "$REPORT_FILE" | sha256sum | awk '{print $1}')
            echo "hash=$HASH" >> $GITHUB_OUTPUT
            echo "New file generated in build dir. Hash: $HASH"
          else
            # Handle case where generation failed or produced no file
            echo "hash=generation_failed_or_empty" >> $GITHUB_OUTPUT
            echo "New report file not found after generation attempt in build dir."
            exit 1
          fi

      - name: Copy, Commit and Push if content changed
        # Run only if hashes differ AND generation was successful
        if: steps.original_committed_hash.outputs.hash != steps.new_generated_hash.outputs.hash && steps.new_generated_hash.outputs.hash != 'generation_failed_or_empty'
        run: |
          echo "License report content has changed. Copying and committing update."
          GENERATED_FILE="${{ steps.paths.outputs.generated_report_file }}"
          COMMITTED_FILE="${{ steps.paths.outputs.committed_report_file }}"

          echo "Copying $GENERATED_FILE to $COMMITTED_FILE"
          cp "$GENERATED_FILE" "$COMMITTED_FILE"

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          git add "$COMMITTED_FILE"

          # Check if there are actually staged changes before committing
          if ! git diff --staged --quiet; then
            git commit -m "Update THIRD-PARTY-NOTICES.txt" -m "Automated update of the license report"
            echo "Pushing changes..."
            git push
          else
            echo "No effective changes detected after staging, skipping commit."
          fi

      - name: Report No Changes
        if: steps.original_committed_hash.outputs.hash == steps.new_generated_hash.outputs.hash
        run: echo "License report content (excluding timestamp) has not changed. No commit needed."
